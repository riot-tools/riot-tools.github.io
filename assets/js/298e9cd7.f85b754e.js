"use strict";(self.webpackChunkriot_tools=self.webpackChunkriot_tools||[]).push([[640],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(g,l(l({ref:t},c),{},{components:n})):r.createElement(g,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<s;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3091:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),l=["components"],o={id:"state-utils-api",title:"API",sidebar_label:"API",slug:"/state-utils/api"},i=void 0,u={unversionedId:"state-utils/state-utils-api",id:"state-utils/state-utils-api",isDocsHomePage:!1,title:"API",description:"clone(value T",source:"@site/docs/state-utils/api.md",sourceDirName:"state-utils",slug:"/state-utils/api",permalink:"/state-utils/api",editUrl:"https://github.com/riot-tools/riot-tools.github.io/edit/master/meiosis/docs/state-utils/api.md",version:"current",frontMatter:{id:"state-utils-api",title:"API",sidebar_label:"API",slug:"/state-utils/api"},sidebar:"state-utils",previous:{title:"Getting Started",permalink:"/state-utils/getting-started"},next:{title:"Helpers",permalink:"/state-utils/helpers"}},c=[{value:"<code>clone(value: T): T</code>",id:"clonevalue-t-t",children:[]},{value:"<code>deepEqual(a: any, b: any): boolean</code>",id:"deepequala-any-b-any-boolean",children:[]},{value:"<code>merge(a: T, b: U, options?: MergeOptions): T &amp; U</code>",id:"mergea-t-b-u-options-mergeoptions-t--u",children:[{value:"Merge arrays",id:"merge-arrays",children:[]},{value:"Merge sets",id:"merge-sets",children:[]},{value:"Override defaults",id:"override-defaults",children:[]}]}],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"clonevalue-t-t"},(0,s.kt)("inlineCode",{parentName:"h2"},"clone(value: T): T")),(0,s.kt)("p",null,"Deep clones objects, arrays, maps and sets"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"\nconst clonedObject = clone({ x: true });\nconst clonedArr = clone([{ x: true }, { y: true }]);\nconst clonedMap = clone(new Map([['test', true]]));\nconst clonedSet = clone(new Set([1, 2, '1', '2']));\n\n")),(0,s.kt)("h2",{id:"deepequala-any-b-any-boolean"},(0,s.kt)("inlineCode",{parentName:"h2"},"deepEqual(a: any, b: any): boolean")),(0,s.kt)("p",null,"Recursively checks if there are changes in the current structure. Returns immediately after detecting a single change."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"\nconst eqObj = deepEqual({ y: true }, { y: false });\n// > false\n\nconst eqArr = deepEqual([{ y: true }], [{ y: false }]);\n// > false\n\nconst eqMap = deepEqual(\n    new Map([['test', [{ y: true  }]]]), \n    new Map([['test', [{ y: false }]]])\n);\n// > false\n\nconst eqSet = deepEqual(\n    new Set(['test', 1]), \n    new Set(['test', 2])\n);\n// > false\n\n")),(0,s.kt)("h2",{id:"mergea-t-b-u-options-mergeoptions-t--u"},(0,s.kt)("inlineCode",{parentName:"h2"},"merge(a: T, b: U, options?: MergeOptions): T & U")),(0,s.kt)("p",null,"Deep merges objects, arrays, maps and sets. Merging can passed options that dictate how arrays and sets are handled. Defaults may also be set."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"\nconst eqObj = merge({ y: true }, { y: false });\n// { y: false }\n\nconst eqArr = merge([{ y: true }], [{ y: false }]);\n// [{ y: true }, { y: false }]\n\n\nconst eqMap = merge(\n    new Map([['test', [{ y: true  }]]]), \n    new Map([['test', [{ y: false }]]])\n);\n// > Map(1) { 'test' => [ { y: false } ] }\n\nconst eqSet = merge(\n    new Set(['test', 1]), \n    new Set(['test', 2])\n);\n// > Set(2) { 'test', 1, 2 }\n\n")),(0,s.kt)("h3",{id:"merge-arrays"},"Merge arrays"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"\nconst x = { arr: [1, 2] };\nconst y = { arr: [3, 4] };\n\nmerge(x, y, { mergeArrays: false });\n// > { arr: [3, 4] }\n\nmerge(x, y, { mergeArrays: true });\n// > { arr: [1, 2, 3, 4] }\n\n")),(0,s.kt)("h3",{id:"merge-sets"},"Merge sets"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"\nconst x = { _set: new Set([1, 2]) };\nconst y = { _set: new Set([3, 4]) };\n\nmerge(x, y, { mergeSets: false });\n// > { _set: Set(2) { 3, 4 } }\n\nmerge(x, y, { mergeSets: true });\n// > { _set: Set(2) { 1, 2, 3, 4 } }\n\n")),(0,s.kt)("h3",{id:"override-defaults"},"Override defaults"),(0,s.kt)("p",null,"Original defaults:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"merge._defaults = {\n\n    mergeArrays: true,\n    mergeSets: true\n};\n")),(0,s.kt)("p",null,"Override:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"\nmerge.setDefaults({\n\n    mergeArrays: false,\n    mergeSets: false\n});\n\n")))}d.isMDXComponent=!0}}]);