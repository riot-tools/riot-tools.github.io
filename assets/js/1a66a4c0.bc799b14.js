"use strict";(self.webpackChunkriot_tools=self.webpackChunkriot_tools||[]).push([[418],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=c(t),m=o,d=b["".concat(l,".").concat(m)]||b[m]||u[m]||a;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=b;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},2418:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return b}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={id:"sak-observable",title:"Observable",sidebar_label:"Observable",slug:"/sak/observable"},l=void 0,c={unversionedId:"sak/sak-observable",id:"sak/sak-observable",isDocsHomePage:!1,title:"Observable",description:"Credits: This module is a reimplementation of Riot Observable made to support typings, OOP, nested observers, and debugging utility.",source:"@site/docs/sak/observable.md",sourceDirName:"sak",slug:"/sak/observable",permalink:"/sak/observable",editUrl:"https://github.com/riot-tools/riot-tools.github.io/edit/master/meiosis/docs/sak/observable.md",version:"current",frontMatter:{id:"sak-observable",title:"Observable",sidebar_label:"Observable",slug:"/sak/observable"},sidebar:"sak",previous:{title:"Getting Started",permalink:"/sak/getting-started"},next:{title:"Options Validator",permalink:"/sak/options-validator"}},p=[{value:"Example",id:"example",children:[]},{value:"Child observers",id:"child-observers",children:[]},{value:"Riot plugin",id:"riot-plugin",children:[]}],u={toc:p};function b(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Credits:")," This module is a reimplementation of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/riot/observable"},"Riot Observable")," made to support typings, OOP, nested observers, and debugging utility."),(0,a.kt)("p",null,"The idea behind this refactor is to add a global event emitter to your application and be able to create child-observers that can have their own namespaced events. You can also wrap an existing object and make it observable; it will have the exact same API."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { Observable } from '@riot-tools/sak';\n\nconst observer = new Observable();\n\n// or\n\nconst somethingToMakeAnObserver = {};\nconst observer = new Observable(somethingToMakeAnObserver);\n\n// with configurable options\nconst observer = new Observable(null, {\n\n    // Can spy on the observer for debugging\n    spy: ({ fn, event, listener, context, args }) => {\n\n        if (fn === 'trigger') {\n\n            console.log(event, args, context);\n        }\n    }\n});\n\nobserver.on(ev, fn);\nobserver.one(ev, fn);\nobserver.off(ev, fn);\nobserver.trigger(ev, fn);\n")),(0,a.kt)("h2",{id:"child-observers"},"Child observers"),(0,a.kt)("p",null,"Once an observer is instantiated, you can observe other components. This gives your component a limited observable API that ties into its parent observer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const modal = {};\n\n// those events can have namespaced prefixes\nobserver.observe(modal, 'modal');\n\nobserver.on('modal-open', () => {});\n\n// Because modal is namespaced, it will automatically prefix the event name with `modal`\nmodal.trigger('open');\n\n// destroy when done;\nmodal.cleanup();\n")),(0,a.kt)("h2",{id:"riot-plugin"},"Riot plugin"),(0,a.kt)("p",null,"You can install your observer onto your components as a plugin via ",(0,a.kt)("inlineCode",{parentName:"p"},"riot.install"),".  Any listeners that are attached via ",(0,a.kt)("inlineCode",{parentName:"p"},"this.on")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"this.one")," are automatically cleaned up before a comonent unmounts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Riot.install(component => observer.install(component));\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"component.riot")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"\n<something>\n\n    ...\n\n    <script>\n\n        export default {\n\n            onClick() {\n\n                this.trigger('something-clicked');\n            },\n\n            onMounted() {\n\n                // will be automatically cleaned up before unmount\n                this.on('user-fetched', (user) => this.update({ user }));\n\n                fetchUser();\n            }\n        }\n    <\/script>\n</something>\n")),(0,a.kt)("p",null,"You can also directly install the observer API on a specific component using the same function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n\n    import { observer } from './events';\n\n    export default observer.install({\n\n        onBeforeMount: () => {}\n    });\n<\/script>\n")))}b.isMDXComponent=!0}}]);