"use strict";(self.webpackChunkriot_tools=self.webpackChunkriot_tools||[]).push([[887],{3196:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return f},default:function(){return u}});var i=e(7462),o=e(3366),r=(e(7294),e(3905)),a=["components"],s={id:"final-form-types",title:"Types",sidebar_label:"Types",slug:"/final-form/types"},l=void 0,m={unversionedId:"final-form/final-form-types",id:"final-form/final-form-types",isDocsHomePage:!1,title:"Types",description:"`ts",source:"@site/docs/final-form/types.md",sourceDirName:"final-form",slug:"/final-form/types",permalink:"/final-form/types",editUrl:"https://github.com/riot-tools/riot-tools.github.io/edit/master/meiosis/docs/final-form/types.md",version:"current",frontMatter:{id:"final-form-types",title:"Types",sidebar_label:"Types",slug:"/final-form/types"},sidebar:"finalForm",previous:{title:"API",permalink:"/final-form/api"}},f=[],p={toc:f};function u(n){var t=n.components,e=(0,o.Z)(n,a);return(0,r.kt)("wrapper",(0,i.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"\nconst withFinalForm: (component: WithFinalFormOpts) => InitializedComponent;\n\nfunction initializeForm(component: InitializedComponent, state: InitializeFormState): void;\n\ndeclare type FormElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\nfunction registerField(component: InitializedComponent, state: InitializeFormState, field: FormElement): void;\n\ndeclare type RffFieldRegistrations = Map<HTMLElement, Function>;\n\ndeclare type OnFormMutatedArgument = {\n    mutationsList: MutationRecord[];\n    observer: MutationObserver;\n    registrations: RffFieldRegistrations;\n    form: FormApi;\n    registerField: (HTMLElement: any) => void;\n};\n\ntype WithFinalFormOpts = RiotComponent & {\n    initialValues: object;\n    formConfig?: Config;\n    formSubscriptions?: FormSubscription;\n    manuallyInitializeFinalForm?: boolean;\n    mutatorOptions?: MutationObserverInit;\n    formElement: () => HTMLFormElement;\n    validate?: (errors: object) => object;\n    onSubmit?: (values: object) => void;\n    onFormChange?: (formState: FormApi) => void;\n    onFieldChange?: (field: HTMLElement, fieldState: FieldState<any>) => void;\n    onFormMutated?: (opts: OnFormMutatedArgument) => void;\n    fieldConfigs?: {\n        [key: string]: FieldConfig<any>;\n    };\n    fieldSubscriptions?: {\n        [key: string]: FieldSubscription;\n    };\n};\n\ntype InitializedComponent = WithFinalFormOpts & {\n    finalForm: () => FormApi;\n    initializeFinalForm: () => void;\n};\n\ntype InitializeFormState = {\n    form: FormApi;\n    registered: {\n        [key: string]: boolean;\n    };\n    registrations: RffFieldRegistrations;\n    enableDefaultBehavior?: boolean;\n    observer?: MutationObserver;\n    mutatorOptions?: MutationObserverInit;\n    unsubscribe?: Function;\n};\n\nconst isNotFunction: (fn: any) => boolean;\nconst requiredFnValidate: (fn: Function) => boolean;\nconst optionalFnValidate: (fn: Function) => boolean;\nconst assertProperConfig: (component: WithFinalFormOpts) => void;\nconst isNotRegisterableField: (field: any) => any;\n\n")))}u.isMDXComponent=!0}}]);