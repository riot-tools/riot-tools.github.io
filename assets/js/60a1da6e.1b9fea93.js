"use strict";(self.webpackChunkriot_tools=self.webpackChunkriot_tools||[]).push([[214],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return d}});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=o.createContext({}),l=function(t){var e=o.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},c=function(t){var e=l(t.components);return o.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},u=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,p=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),u=l(n),d=a,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||r;return n?o.createElement(f,i(i({ref:e},c),{},{components:n})):o.createElement(f,i({ref:e},c))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6925:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],s={id:"meiosis-getting-started",title:"Getting Started",sidebar_label:"Getting Started",slug:"/meiosis/getting-started"},p=void 0,l={unversionedId:"meiosis/meiosis-getting-started",id:"meiosis/meiosis-getting-started",isDocsHomePage:!1,title:"Getting Started",description:"What is meiosis?",source:"@site/docs/meiosis/getting-started.md",sourceDirName:"meiosis",slug:"/meiosis/getting-started",permalink:"/meiosis/getting-started",editUrl:"https://github.com/riot-tools/riot-tools.github.io/edit/master/meiosis/docs/meiosis/getting-started.md",version:"current",frontMatter:{id:"meiosis-getting-started",title:"Getting Started",sidebar_label:"Getting Started",slug:"/meiosis/getting-started"},sidebar:"meiosis",next:{title:"API",permalink:"/meiosis/api"}},c=[{value:"What is meiosis?",id:"what-is-meiosis",children:[]},{value:"Key things to note",id:"key-things-to-note",children:[]},{value:"Usage",id:"usage",children:[]}],m={toc:c};function u(t){var e=t.components,n=(0,a.Z)(t,i);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-is-meiosis"},"What is meiosis?"),(0,r.kt)("p",null,"Meiosis is a design pattern for managing application state using streams. Riot meiosis is an implementation of that pattern for Riot. ",(0,r.kt)("a",{parentName:"p",href:"https://meiosis.js.org/"},"Learn more about meiosis to understand the concept"),"."),(0,r.kt)("h2",{id:"key-things-to-note"},"Key things to note"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Implements a stream mechanism to update state"),(0,r.kt)("li",{parentName:"ul"},"Comes with a ",(0,r.kt)("inlineCode",{parentName:"li"},"connect")," function to wrap stream functionality"),(0,r.kt)("li",{parentName:"ul"},"Components attempt to update when updates are dispatched"),(0,r.kt)("li",{parentName:"ul"},"Prevent component updates if state has not changed"),(0,r.kt)("li",{parentName:"ul"},"Stream listeners are destroyed when ",(0,r.kt)("inlineCode",{parentName:"li"},"onBeforeUnmount"))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm i --save @riot-tools/meiosis\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./appState.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import createStateStream from '@riot-tools/meiosis';\n\n// Set your initial state.\n// State is only mutable via manager API.\nconst state = {\n    initial: true,\n    isNew: true,\n    mutable: false,\n    nested: {\n        hasPasta: true\n    }\n};\n\n// Root state reducer\nconst reducer = (newState, oldState) => ({\n    ...oldState,\n    ...newState\n});\n\n// Create global app state instance\nconst appState = createStateStream(state);\n\n// Extract the state stream\nconst { stream } = appState;\n\nstream.addReducer(reducer);\n\nstream.dispatch({\n    initial: false,\n    isNew: false\n});\n\n// Gets an immutable clone of the current state\nconsole.log(stream.state());\n// > {\n//     initial: false,\n//     isNew: false,\n//     mutable: false,\n//     nested: {\n//         hasPasta: true\n//     }\n// }\n\nexport default appState;\n")),(0,r.kt)("p",null,"In your ",(0,r.kt)("inlineCode",{parentName:"p"},".riot")," files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"\n<myComponent>\n\n    <p if={ hasPasta }>I have pasta!</p>\n\n    <script>\n\n        import { connect } from './appState';\n        import myActions from './actions';\n\n        const mapToState = (appState, ownState, ownProps) => ({\n            ...ownState,\n            ...appState.nested\n        });\n\n        // Optional mapping of functions or objects to component\n        const mapToComponent = myActions;\n        // OR\n        const mapToComponent = (ownProps, ownState) => myActions;\n\n        const component = {\n\n            onBeforeMount() {\n\n                // connect will respect original onBeforeMount\n                this.state = {\n                    lala: true\n                }\n            },\n\n            onMounted() {\n\n                // Component will have access to dispatch from lexical this\n                this.dispatch({ myComponentMounted: true });\n            }\n        }\n\n        export default connect(mapToState)(component);\n        // OR\n        export default connect(mapToState, mapToComponent)(component);\n    <\/script>\n</myComponent>\n")))}u.isMDXComponent=!0}}]);